
 UniversalSensor V3.4
 
 
 benötigte Komponenten:
 NodeMCU/WEMOS D1 mini, NanoLGW (ESP8266) oder Maple mini/BluePill (STM32F1)
 BME680 Sensor
 
 optional:
 RFM69CW
 128x64 OLED Display
 BH1750 Lichtsensor
 
 MQTT:
 -----
 Wenn MQTT ausgewählt wird, muß zwingend ein ESP8266 Board verwendet werden, die anderen haben kein WiFi !
 Die Benutzernamen und Passwörter für wifi und MQTT werden in die Datei secrets.h eingetragen !
 Alle anderen Sensoreinstellungen kann man in der config.h bearbeiten.
 Die MQTT Topics sind wie folgt aufgebaut:
 
 mqtt_clientid/mqtt_room/temperature
 mqtt_clientid/mqtt_room/pressure
 mqtt_clientid/mqtt_room/humidity
 mqtt_clientid/mqtt_room/iaq
 mqtt_clientid/mqtt_room/iaq_accuracy
 mqtt_clientid/mqtt_room/co2
 mqtt_clientid/mqtt_room/voc
 mqtt_clientid/mqtt_room/light
 mqtt_clientid/mqtt_room/rssi
 
 mqtt_client ist z.B.: UniversalSensor-01
 mqtt_room ist z.B.  : Wohnzimmer
 das ergibt dann folgende MQTT Topics:
 
 UniversalSensor-01/Wohnzimmer/temperature
 UniversalSensor-01/Wohnzimmer/pressure
 UniversalSensor-01/Wohnzimmer/humidity
 UniversalSensor-01/Wohnzimmer/iaq
 UniversalSensor-01/Wohnzimmer/iaq_accuracy
 UniversalSensor-01/Wohnzimmer/co2
 UniversalSensor-01/Wohnzimmer/voc
 UniversalSensor-01/Wohnzimmer/light
 UniversalSensor-01/Wohnzimmer/rssi
 
 MOMEKIT:
 --------
 Wenn homekit aktiviert wird, wird der iaq Wert als Wert von 1 - 5 ausgegeben !
 Die Bedeutung ist:
 
 1: exzellent
 2: gut
 3: ausreichend
 4: schlecht
 5: unzureichend 
 
 Damit kann man über Homebridge (auf dem RaspberryPi z.B.) seine Sensoren in Homekit einbinden.
 Das funktioniert sehr gut. 
 
 
 ############################################
 # Einbinden der BSEC Software für ESP8266: #
 # Stand: 15.09.2019                        #
 # ESP8266 Paket V2.5.2                     #
 # BSEC V1.4.7.4                            #
 ############################################
 
 1. Die "libalgobsec.a" muss nach "\Users\[Benutzername]\AppData\Local\Arduino15\packages\esp8266\hardware\esp8266\2.5.2\tools\sdk\lib\ kopiert werden !
    Das ist die "precompiled Lib" von Bosch Sensortec.
 
 2. Die Linker Datei "hardware\esp8266\2.5.2\tools\sdk\ld\eagle.app.v6.common.ld" muß angepasst werden:
    nach der Zeile "*libm.a:(.literal .text .literal.* .text.*)" , die Zeile "*libalgobsec.a:(.literal .text .literal.* .text.*)" einfügen.
 
 3. Als letztes muss noch ein Parameter in der Datei "hardware\esp8266\2.5.2\platform.txt" hinzugefügt werden:
    am Ende der Zeile "compiler.c.elf.libs= ... -lm -lgcc" folgendes anfügen " -lalgobsec" .
 
 ############################################
 # Einbinden der BSEC Software für STM32F1: #
 # Stand: 15.09.2019                        #
 # BSEC V1.4.7.4                            #
 ############################################

 1. den Ordner aus dem heruntergeladenen Archiv "Arduino_STM32-master" nach C:\Users\<NAME>\Documents\Arduino\hardware\ kopieren.
 
 2. Arduino IDE starten, im Menu Werkzeuge, Boardverwalter... wählen und die "Arduino SAM Boards (Cortex-M3)" von der Liste der verfügbaren Boards installieren.
    Dieser Schritt ist notwendig, damit das arm-none-eabi-g++ toolchain installiert wird !

 3. C:\Users\<Name>\Documents\Arduino\hardware\Arduino_STM32\STM32F1\variants\generic_stm32f103c\ld
    die libalgobsec.a aus dem BSEC-Archiv ( algo\bin\gcc\Cortex_M3\ ) muss hier her kopiert werden !
    
 4. C:\Users\<Name>\Documents\Arduino\hardware\Arduino_STM32\STM32F1\variants\generic_stm32f103c\ld\common.inc:
    GROUP(libgcc.a libc.a libm.a) ändern in: GROUP(libgcc.a libc.a libalgobsec.a libm.a)
    
 5. C:\Users\<Name>\Documents\Arduino\hardware\Arduino_STM32\STM32F1\platform.txt:
    nach dem Eintrag suchen: recipe.c.combine.pattern="{compiler.path} ... "-L{build.path}" -lalgobsec -lm -lgcc ...
    und wie gezeigt "-lalgobsec" zwischen "-L{builpath}" und "-lm" einfügen
    
 6. Einmal die Arduino IDE neu starten, jetzt sollte es funktionieren ;o)
 
 Eine super Anleitung gibt es hier: 
 https://wolfgangklenk.wordpress.com/2017/11/05/indoor-air-quality-iaq-measurement-with-bosch-bme680-and-stm32f103c8t6/
 
 ###########################################
 
 WICHTIG:
 
 Die Adafruit_SSD1306 Lib und die BH1750 Lib habe ich für dieses Projekt geändert.
 Habe die geänderten Dateien mit in den Projektordner aufgenommen, man braucht keine Bibliotheken mehr irgendwo hin kopieren !
 Die Änderungen betreffen zum einen den STM32F1 (I2C nicht ein zweites mal initialisieren) und zum anderen
 die Unterstützung des SH1106 OLED Controllers. Es funktionieren offensichtlich beide Controller (SSD1306 und SH1106)
 mit dieser Änderung ! Ich habe es mit einem 1.3" Display (128x64, SH1106) und einem 0.96" Display (128x64, SSD1306) getestet.
 
 Die Datei "bsec_integration.c" habe ich auch geändert (automatische Erkennung der I2C Adresse, Einbindung der neuen Messwerte CO2 und VOC),
 bei Update auf neue BSEC Version wichtig !
 
 ###########################################

 BluePill Board (STM32F103C8):
 In der Arduino IDE als Board "Generic STM32F103C series" wählen und als Variante "STM32F103CB (20k RAM, 128k Flash)" !
 Sonst reicht der Speicher nicht ;o)
 Die Boards haben in den allermeisten Fällen 128K Flash Speicher, obwohl die C8 Boards offiziell nur 64k Flash haben sollten.
 
 